services:
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.5.0
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - "xpack.security.enabled=true"
      - "xpack.security.http.ssl.enabled=false"
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
    ports:
      - 9200:9200
    networks:
      - backend
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} -s http://localhost:9200/_cluster/health | grep -q 'status'"]
      interval: 10s
      timeout: 5s
      retries: 1

  kibana:
    image: kibana:8.5.0
    container_name: kibana
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
      - "ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}"
      - "ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}"
      - "XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa"
      - "xpack.security.enabled=true"
    ports:
      - 5601:5601
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy  # Wait for Elasticsearch to be ready

  postgresql:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data

  app:
    build:
      context: .  # Uses your Dockerfile
      dockerfile: Dockerfile
    container_name: my_go_app
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy  # Wait until Elasticsearch is healthy
      postgresql:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8080:8080"  # Change this if your app uses a different port
    networks:
      - backend
    command: ["make", "run"]

networks:
  backend:

volumes:
  postgres_data:
  redis_data:
