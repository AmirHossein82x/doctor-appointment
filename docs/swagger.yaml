definitions:
  dto.DoctorProfileCreateRequest:
    properties:
      bio:
        type: string
      experience_years:
        type: integer
      speciality_id:
        type: integer
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - experience_years
    - speciality_id
    - user_id
    type: object
  dto.ForgetPasswordRequest:
    properties:
      phone_number:
        type: string
    type: object
  dto.OTPRequest:
    properties:
      phone_number:
        type: string
    type: object
  dto.PasswordResetRequest:
    properties:
      password:
        type: string
      password_retype:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.SpecialityCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.UserLoginRequest:
    properties:
      password:
        type: string
      phone_number:
        type: string
    type: object
  dto.UserRegisterRequest:
    properties:
      name:
        type: string
      password:
        type: string
      verified_token:
        type: string
    type: object
  dto.VerifyOTPRequest:
    properties:
      otp_code:
        type: string
      phone_number:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/create-doctor-profile:
    post:
      consumes:
      - application/json
      description: Create a new doctor profile and update the user's role to "doctor"
      parameters:
      - description: Doctor profile details
        in: body
        name: doctorProfile
        required: true
        schema:
          $ref: '#/definitions/dto.DoctorProfileCreateRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new doctor profile
      tags:
      - admin
  /admin/create-speciality:
    post:
      consumes:
      - application/json
      description: Create a new speciality with a name, description, and auto-generated
        slug
      parameters:
      - description: Speciality details
        in: body
        name: speciality
        required: true
        schema:
          $ref: '#/definitions/dto.SpecialityCreateRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new speciality
      tags:
      - admin
  /admin/get-all-users:
    get:
      description: retrieve all users with pagination and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search query (name or phone starts with)
        in: query
        name: search
        type: string
      - description: Search query (based on user_role)
        enum:
        - admin
        - doctor
        - patient
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: retrieve all users with pagination and search
      tags:
      - admin
  /admin/get-specialities:
    get:
      description: Retrieve specialities with pagination and search on the name of
        the speciality
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search query (name starts with)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Retrieve specialities with pagination and search
      tags:
      - admin
  /appointment/get-doctor-profiles:
    get:
      description: Retrieve all doctor profiles joined with user table
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Retrieve all doctor profiles
      tags:
      - appointment
  /auth/forget-password:
    post:
      consumes:
      - application/json
      description: get forget password
      parameters:
      - description: Phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ForgetPasswordRequest'
      produces:
      - application/json
      responses: {}
      summary: get forget password
      tags:
      - auth
  /auth/get-access-token-by-refresh-token:
    post:
      consumes:
      - application/json
      description: get access token by refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses: {}
      summary: get access token by refresh token
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: login users
      parameters:
      - description: Phone Number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses: {}
      summary: login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: creating users
      parameters:
      - description: Phone Number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: registering user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: get reset password
      parameters:
      - description: password and password_retype
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PasswordResetRequest'
      - description: The encrypted key for password reset
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: get reset password
      tags:
      - auth
  /auth/verify-access-token:
    post:
      consumes:
      - application/json
      description: verify access token
      produces:
      - application/json
      responses: {}
      summary: verify access token
      tags:
      - auth
  /otp/generate:
    post:
      consumes:
      - application/json
      description: Generates an OTP for phone number verification
      parameters:
      - description: Phone Number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.OTPRequest'
      produces:
      - application/json
      responses: {}
      summary: Generate OTP
      tags:
      - OTP
  /otp/verify:
    post:
      consumes:
      - application/json
      description: Verifies the OTP entered by the user
      parameters:
      - description: Phone Number and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyOTPRequest'
      produces:
      - application/json
      responses: {}
      summary: Verify OTP
      tags:
      - OTP
swagger: "2.0"
